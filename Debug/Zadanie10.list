
Zadanie10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002c54  08002c54  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c54  08002c54  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000068  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000070  20000070  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007bf5  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019c8  00000000  00000000  00027c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  000295f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  00029e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d75  00000000  00000000  0002a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006459  00000000  00000000  00041335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078dab  00000000  00000000  0004778e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c0539  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021c4  00000000  00000000  000c058c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002be0 	.word	0x08002be0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002be0 	.word	0x08002be0

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ffe3 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000316:	f7ff ff57 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800031a:	4603      	mov	r3, r0
 800031c:	2200      	movs	r2, #0
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffa7 	bl	8000274 <NVIC_EncodePriority>
 8000326:	4603      	mov	r3, r0
 8000328:	4619      	mov	r1, r3
 800032a:	2010      	movs	r0, #16
 800032c:	f7ff ff78 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000330:	2010      	movs	r0, #16
 8000332:	f7ff ff57 	bl	80001e4 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000336:	f7ff ff47 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800033a:	4603      	mov	r3, r0
 800033c:	2200      	movs	r2, #0
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff97 	bl	8000274 <NVIC_EncodePriority>
 8000346:	4603      	mov	r3, r0
 8000348:	4619      	mov	r1, r3
 800034a:	2011      	movs	r0, #17
 800034c:	f7ff ff68 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000350:	2011      	movs	r0, #17
 8000352:	f7ff ff47 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <LL_AHB1_GRP1_EnableClock>:
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	4907      	ldr	r1, [pc, #28]	; (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4313      	orrs	r3, r2
 800036e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4013      	ands	r3, r2
 8000378:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800037a:	68fb      	ldr	r3, [r7, #12]
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000390:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000394:	f7ff ffe2 	bl	800035c <LL_AHB1_GRP1_EnableClock>

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <__NVIC_SetPriorityGrouping>:
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f003 0307 	and.w	r3, r3, #7
 80003aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <__NVIC_SetPriorityGrouping+0x44>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003b2:	68ba      	ldr	r2, [r7, #8]
 80003b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003b8:	4013      	ands	r3, r2
 80003ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003ce:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <__NVIC_SetPriorityGrouping+0x44>)
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	60d3      	str	r3, [r2, #12]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <__NVIC_GetPriorityGrouping>:
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <__NVIC_GetPriorityGrouping+0x18>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	0a1b      	lsrs	r3, r3, #8
 80003ee:	f003 0307 	and.w	r3, r3, #7
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <__NVIC_SetPriority>:
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	6039      	str	r1, [r7, #0]
 800040a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800040c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000410:	2b00      	cmp	r3, #0
 8000412:	db0a      	blt.n	800042a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	b2da      	uxtb	r2, r3
 8000418:	490c      	ldr	r1, [pc, #48]	; (800044c <__NVIC_SetPriority+0x4c>)
 800041a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800041e:	0112      	lsls	r2, r2, #4
 8000420:	b2d2      	uxtb	r2, r2
 8000422:	440b      	add	r3, r1
 8000424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000428:	e00a      	b.n	8000440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4908      	ldr	r1, [pc, #32]	; (8000450 <__NVIC_SetPriority+0x50>)
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	f003 030f 	and.w	r3, r3, #15
 8000436:	3b04      	subs	r3, #4
 8000438:	0112      	lsls	r2, r2, #4
 800043a:	b2d2      	uxtb	r2, r2
 800043c:	440b      	add	r3, r1
 800043e:	761a      	strb	r2, [r3, #24]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	e000e100 	.word	0xe000e100
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <NVIC_EncodePriority>:
{
 8000454:	b480      	push	{r7}
 8000456:	b089      	sub	sp, #36	; 0x24
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f003 0307 	and.w	r3, r3, #7
 8000466:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000468:	69fb      	ldr	r3, [r7, #28]
 800046a:	f1c3 0307 	rsb	r3, r3, #7
 800046e:	2b04      	cmp	r3, #4
 8000470:	bf28      	it	cs
 8000472:	2304      	movcs	r3, #4
 8000474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	3304      	adds	r3, #4
 800047a:	2b06      	cmp	r3, #6
 800047c:	d902      	bls.n	8000484 <NVIC_EncodePriority+0x30>
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	3b03      	subs	r3, #3
 8000482:	e000      	b.n	8000486 <NVIC_EncodePriority+0x32>
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	f04f 32ff 	mov.w	r2, #4294967295
 800048c:	69bb      	ldr	r3, [r7, #24]
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	43da      	mvns	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	401a      	ands	r2, r3
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800049c:	f04f 31ff 	mov.w	r1, #4294967295
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	43d9      	mvns	r1, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004ac:	4313      	orrs	r3, r2
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3724      	adds	r7, #36	; 0x24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <LL_RCC_HSI_Enable+0x1c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <LL_RCC_HSI_Enable+0x1c>)
 80004c6:	f043 0301 	orr.w	r3, r3, #1
 80004ca:	6013      	str	r3, [r2, #0]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000

080004dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <LL_RCC_HSI_IsReady+0x20>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f003 0302 	and.w	r3, r3, #2
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	bf0c      	ite	eq
 80004ec:	2301      	moveq	r3, #1
 80004ee:	2300      	movne	r3, #0
 80004f0:	b2db      	uxtb	r3, r3
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000

08000500 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4904      	ldr	r1, [pc, #16]	; (8000528 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000516:	4313      	orrs	r3, r2
 8000518:	600b      	str	r3, [r1, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <LL_RCC_SetSysClkSource+0x24>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	f023 0203 	bic.w	r2, r3, #3
 800053c:	4904      	ldr	r1, [pc, #16]	; (8000550 <LL_RCC_SetSysClkSource+0x24>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4313      	orrs	r3, r2
 8000542:	604b      	str	r3, [r1, #4]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <LL_RCC_GetSysClkSource+0x18>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f003 030c 	and.w	r3, r3, #12
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_RCC_SetAHBPrescaler+0x24>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000580:	4904      	ldr	r1, [pc, #16]	; (8000594 <LL_RCC_SetAHBPrescaler+0x24>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	604b      	str	r3, [r1, #4]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000

08000598 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80005a8:	4904      	ldr	r1, [pc, #16]	; (80005bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	604b      	str	r3, [r1, #4]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005d0:	4904      	ldr	r1, [pc, #16]	; (80005e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	604b      	str	r3, [r1, #4]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	4907      	ldr	r1, [pc, #28]	; (8000614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4313      	orrs	r3, r2
 80005fa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005fe:	69da      	ldr	r2, [r3, #28]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4013      	ands	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000606:	68fb      	ldr	r3, [r7, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	40021000 	.word	0x40021000

08000618 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LL_APB2_GRP1_EnableClock+0x2c>)
 800062e:	699a      	ldr	r2, [r3, #24]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4013      	ands	r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000636:	68fb      	ldr	r3, [r7, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000

08000648 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <LL_FLASH_SetLatency+0x24>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f023 0207 	bic.w	r2, r3, #7
 8000658:	4904      	ldr	r1, [pc, #16]	; (800066c <LL_FLASH_SetLatency+0x24>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4313      	orrs	r3, r2
 800065e:	600b      	str	r3, [r1, #0]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40022000 	.word	0x40022000

08000670 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <LL_FLASH_GetLatency+0x18>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 0307 	and.w	r3, r3, #7
}
 800067c:	4618      	mov	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f043 0201 	orr.w	r2, r3, #1
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	601a      	str	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6a1a      	ldr	r2, [r3, #32]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	431a      	orrs	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	621a      	str	r2, [r3, #32]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f06f 0204 	mvn.w	r2, #4
 80006dc:	611a      	str	r2, [r3, #16]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d101      	bne.n	8000702 <LL_TIM_IsActiveFlag_CC2+0x18>
 80006fe:	2301      	movs	r3, #1
 8000700:	e000      	b.n	8000704 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	f043 0204 	orr.w	r2, r3, #4
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60da      	str	r2, [r3, #12]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <main>:
  * @retval int
  */


int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff ff6f 	bl	8000618 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800073a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800073e:	f7ff ff53 	bl	80005e8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000742:	2003      	movs	r0, #3
 8000744:	f7ff fe2a 	bl	800039c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000748:	f7ff fe4c 	bl	80003e4 <__NVIC_GetPriorityGrouping>
 800074c:	4603      	mov	r3, r0
 800074e:	2200      	movs	r2, #0
 8000750:	210f      	movs	r1, #15
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe7e 	bl	8000454 <NVIC_EncodePriority>
 8000758:	4603      	mov	r3, r0
 800075a:	4619      	mov	r1, r3
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f7ff fe4e 	bl	8000400 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f81c 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f7ff fe10 	bl	800038c <MX_GPIO_Init>
  MX_DMA_Init();
 800076c:	f7ff fdce 	bl	800030c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000770:	f001 f858 	bl	8001824 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000774:	f000 fc12 	bl	8000f9c <MX_TIM2_Init>

  USART2_RegisterCallback(proccesDmaData);
 8000778:	4808      	ldr	r0, [pc, #32]	; (800079c <main+0x6c>)
 800077a:	f001 f841 	bl	8001800 <USART2_RegisterCallback>

  LL_TIM_EnableIT_CC2(TIM2);
 800077e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000782:	f7ff ffc5 	bl	8000710 <LL_TIM_EnableIT_CC2>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000786:	2101      	movs	r1, #1
 8000788:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800078c:	f7ff ff8e 	bl	80006ac <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8000790:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000794:	f7ff ff7a 	bl	800068c <LL_TIM_EnableCounter>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000798:	e7fe      	b.n	8000798 <main+0x68>
 800079a:	bf00      	nop
 800079c:	08000839 	.word	0x08000839

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff ff4f 	bl	8000648 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80007aa:	bf00      	nop
 80007ac:	f7ff ff60 	bl	8000670 <LL_FLASH_GetLatency>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1fa      	bne.n	80007ac <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80007b6:	f7ff fe81 	bl	80004bc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80007ba:	bf00      	nop
 80007bc:	f7ff fe8e 	bl	80004dc <LL_RCC_HSI_IsReady>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d1fa      	bne.n	80007bc <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80007c6:	2010      	movs	r0, #16
 80007c8:	f7ff fe9a 	bl	8000500 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fecf 	bl	8000570 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff fee0 	bl	8000598 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff fef1 	bl	80005c0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff fea4 	bl	800052c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80007e4:	bf00      	nop
 80007e6:	f7ff feb5 	bl	8000554 <LL_RCC_GetSysClkSource>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1fa      	bne.n	80007e6 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <SystemClock_Config+0x60>)
 80007f2:	f002 f999 	bl	8002b28 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80007f6:	4802      	ldr	r0, [pc, #8]	; (8000800 <SystemClock_Config+0x60>)
 80007f8:	f002 f9a4 	bl	8002b44 <LL_SetSystemCoreClock>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	007a1200 	.word	0x007a1200

08000804 <setDutyCycle>:
void setDutyCycle(uint8_t D){
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = ((TIM2->ARR)*D)/100;
 800080e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000814:	79fa      	ldrb	r2, [r7, #7]
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081e:	4905      	ldr	r1, [pc, #20]	; (8000834 <setDutyCycle+0x30>)
 8000820:	fba1 1303 	umull	r1, r3, r1, r3
 8000824:	095b      	lsrs	r3, r3, #5
 8000826:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	51eb851f 	.word	0x51eb851f

08000838 <proccesDmaData>:
/* USER CODE BEGIN 4 */
void proccesDmaData(uint8_t sign)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	/* Process received data */
	dataRX[index_1] = sign;
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <proccesDmaData+0xe4>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	4619      	mov	r1, r3
 8000848:	4a35      	ldr	r2, [pc, #212]	; (8000920 <proccesDmaData+0xe8>)
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	5453      	strb	r3, [r2, r1]
	if(dataRX[index_1] == '$'){
 800084e:	4b33      	ldr	r3, [pc, #204]	; (800091c <proccesDmaData+0xe4>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	4b32      	ldr	r3, [pc, #200]	; (8000920 <proccesDmaData+0xe8>)
 8000856:	5c9b      	ldrb	r3, [r3, r2]
 8000858:	2b24      	cmp	r3, #36	; 0x24
 800085a:	d102      	bne.n	8000862 <proccesDmaData+0x2a>
		trigger = 1;
 800085c:	4b31      	ldr	r3, [pc, #196]	; (8000924 <proccesDmaData+0xec>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
	}
	if(trigger){
 8000862:	4b30      	ldr	r3, [pc, #192]	; (8000924 <proccesDmaData+0xec>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d04d      	beq.n	8000906 <proccesDmaData+0xce>
		if(index_1 > 5){
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <proccesDmaData+0xe4>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b05      	cmp	r3, #5
 8000870:	d915      	bls.n	800089e <proccesDmaData+0x66>
			if(!strncmp(dataRX,"$manual$",8)){
 8000872:	2208      	movs	r2, #8
 8000874:	492c      	ldr	r1, [pc, #176]	; (8000928 <proccesDmaData+0xf0>)
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <proccesDmaData+0xe8>)
 8000878:	f002 f9a0 	bl	8002bbc <strncmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d102      	bne.n	8000888 <proccesDmaData+0x50>
				mode = 1;
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <proccesDmaData+0xf4>)
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
			}
			if(!strncmp(dataRX,"$auto$",6)){
 8000888:	2206      	movs	r2, #6
 800088a:	4929      	ldr	r1, [pc, #164]	; (8000930 <proccesDmaData+0xf8>)
 800088c:	4824      	ldr	r0, [pc, #144]	; (8000920 <proccesDmaData+0xe8>)
 800088e:	f002 f995 	bl	8002bbc <strncmp>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <proccesDmaData+0x66>
				mode = 0;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <proccesDmaData+0xf4>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
			}
		}
		if(mode) {
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <proccesDmaData+0xf4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d022      	beq.n	80008ec <proccesDmaData+0xb4>
		  if(!strncmp(dataRX,"$PWM",4) && dataRX[6]=='$'){
 80008a6:	2204      	movs	r2, #4
 80008a8:	4922      	ldr	r1, [pc, #136]	; (8000934 <proccesDmaData+0xfc>)
 80008aa:	481d      	ldr	r0, [pc, #116]	; (8000920 <proccesDmaData+0xe8>)
 80008ac:	f002 f986 	bl	8002bbc <strncmp>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d11a      	bne.n	80008ec <proccesDmaData+0xb4>
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <proccesDmaData+0xe8>)
 80008b8:	799b      	ldrb	r3, [r3, #6]
 80008ba:	2b24      	cmp	r3, #36	; 0x24
 80008bc:	d116      	bne.n	80008ec <proccesDmaData+0xb4>
		  prve = (dataRX[4]-'0')*10;
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <proccesDmaData+0xe8>)
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <proccesDmaData+0x100>)
 80008d2:	601a      	str	r2, [r3, #0]
		  druhe = (dataRX[5]-'0');
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <proccesDmaData+0xe8>)
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	3b30      	subs	r3, #48	; 0x30
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <proccesDmaData+0x104>)
 80008dc:	6013      	str	r3, [r2, #0]
		  output_pwm = prve + druhe;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <proccesDmaData+0x100>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <proccesDmaData+0x104>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a15      	ldr	r2, [pc, #84]	; (8000940 <proccesDmaData+0x108>)
 80008ea:	6013      	str	r3, [r2, #0]
		  }
		}

		if(index_1 > 1 && sign == '$'){
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <proccesDmaData+0xe4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d908      	bls.n	8000906 <proccesDmaData+0xce>
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b24      	cmp	r3, #36	; 0x24
 80008f8:	d105      	bne.n	8000906 <proccesDmaData+0xce>
			trigger = 0;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <proccesDmaData+0xec>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
			index_1 = 0;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <proccesDmaData+0xe4>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
		}
	}
	index_1 += 1;
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <proccesDmaData+0xe4>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <proccesDmaData+0xe4>)
 8000910:	701a      	strb	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000024 	.word	0x20000024
 8000920:	20000048 	.word	0x20000048
 8000924:	20000038 	.word	0x20000038
 8000928:	08002bf8 	.word	0x08002bf8
 800092c:	20000034 	.word	0x20000034
 8000930:	08002c04 	.word	0x08002c04
 8000934:	08002c0c 	.word	0x08002c0c
 8000938:	20000028 	.word	0x20000028
 800093c:	2000002c 	.word	0x2000002c
 8000940:	20000030 	.word	0x20000030

08000944 <TIM2_IRQHandler>:
/* USER CODE END 4 */
void TIM2_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC2(TIM2)){
 8000948:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800094c:	f7ff fecd 	bl	80006ea <LL_TIM_IsActiveFlag_CC2>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d034      	beq.n	80009c0 <TIM2_IRQHandler+0x7c>
		if(!mode){
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <TIM2_IRQHandler+0x80>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d126      	bne.n	80009ac <TIM2_IRQHandler+0x68>
			  if(act_pwm)
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <TIM2_IRQHandler+0x84>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d004      	beq.n	8000970 <TIM2_IRQHandler+0x2c>
			   output_pwm++;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <TIM2_IRQHandler+0x88>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <TIM2_IRQHandler+0x88>)
 800096e:	6013      	str	r3, [r2, #0]
			  if(!act_pwm)
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <TIM2_IRQHandler+0x84>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d104      	bne.n	8000982 <TIM2_IRQHandler+0x3e>
			   output_pwm--;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <TIM2_IRQHandler+0x88>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3b01      	subs	r3, #1
 800097e:	4a13      	ldr	r2, [pc, #76]	; (80009cc <TIM2_IRQHandler+0x88>)
 8000980:	6013      	str	r3, [r2, #0]
			  if(output_pwm > 98)
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <TIM2_IRQHandler+0x88>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b62      	cmp	r3, #98	; 0x62
 8000988:	dd02      	ble.n	8000990 <TIM2_IRQHandler+0x4c>
				  act_pwm = 0;
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <TIM2_IRQHandler+0x84>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
			  if(output_pwm < 1)
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <TIM2_IRQHandler+0x88>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	dc02      	bgt.n	800099e <TIM2_IRQHandler+0x5a>
			  	  act_pwm = 1;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <TIM2_IRQHandler+0x84>)
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]

			setDutyCycle(output_pwm);
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <TIM2_IRQHandler+0x88>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff2d 	bl	8000804 <setDutyCycle>
 80009aa:	e005      	b.n	80009b8 <TIM2_IRQHandler+0x74>
		}
		else{
			setDutyCycle(output_pwm);
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <TIM2_IRQHandler+0x88>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff26 	bl	8000804 <setDutyCycle>
		}
		LL_TIM_ClearFlag_CC2(TIM2);
 80009b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80009bc:	f7ff fe87 	bl	80006ce <LL_TIM_ClearFlag_CC2>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000034 	.word	0x20000034
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000030 	.word	0x20000030

080009d0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	3b01      	subs	r3, #1
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <LL_DMA_DisableChannel+0x3c>)
 80009e0:	5cd3      	ldrb	r3, [r2, r3]
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	3a01      	subs	r2, #1
 80009ee:	4907      	ldr	r1, [pc, #28]	; (8000a0c <LL_DMA_DisableChannel+0x3c>)
 80009f0:	5c8a      	ldrb	r2, [r1, r2]
 80009f2:	4611      	mov	r1, r2
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	440a      	add	r2, r1
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	6013      	str	r3, [r2, #0]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	08002c14 	.word	0x08002c14

08000a10 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000a24:	bf0c      	ite	eq
 8000a26:	2301      	moveq	r3, #1
 8000a28:	2300      	movne	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2301      	moveq	r3, #1
 8000a50:	2300      	movne	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000a74:	bf0c      	ite	eq
 8000a76:	2301      	moveq	r3, #1
 8000a78:	2300      	movne	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a96:	605a      	str	r2, [r3, #4]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ab2:	605a      	str	r2, [r3, #4]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ace:	605a      	str	r2, [r3, #4]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	f003 0310 	and.w	r3, r3, #16
 8000aec:	2b10      	cmp	r3, #16
 8000aee:	d101      	bne.n	8000af4 <LL_USART_IsActiveFlag_IDLE+0x18>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b12:	2b40      	cmp	r3, #64	; 0x40
 8000b14:	d101      	bne.n	8000b1a <LL_USART_IsActiveFlag_TC+0x18>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <LL_USART_IsActiveFlag_TC+0x1a>
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2210      	movs	r2, #16
 8000b34:	621a      	str	r2, [r3, #32]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <HardFault_Handler+0x4>

08000b4e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <MemManage_Handler+0x4>

08000b54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <BusFault_Handler+0x4>

08000b5a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <UsageFault_Handler+0x4>

08000b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <DMA1_Channel6_IRQHandler+0x38>)
 8000b9e:	f7ff ff37 	bl	8000a10 <LL_DMA_IsActiveFlag_TC6>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d105      	bne.n	8000bb4 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000ba8:	f000 ff18 	bl	80019dc <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <DMA1_Channel6_IRQHandler+0x38>)
 8000bae:	f7ff ff6b 	bl	8000a88 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8000bb2:	e00a      	b.n	8000bca <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <DMA1_Channel6_IRQHandler+0x38>)
 8000bb6:	f7ff ff53 	bl	8000a60 <LL_DMA_IsActiveFlag_HT6>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d104      	bne.n	8000bca <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000bc0:	f000 ff0c 	bl	80019dc <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <DMA1_Channel6_IRQHandler+0x38>)
 8000bc6:	f7ff ff7b 	bl	8000ac0 <LL_DMA_ClearFlag_HT6>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <DMA1_Channel7_IRQHandler>:

/**
* @brief This function handles DMA1 channel7 global interrupt.
*/
void DMA1_Channel7_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000bd8:	480a      	ldr	r0, [pc, #40]	; (8000c04 <DMA1_Channel7_IRQHandler+0x30>)
 8000bda:	f7ff ff2d 	bl	8000a38 <LL_DMA_IsActiveFlag_TC7>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d10d      	bne.n	8000c00 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <DMA1_Channel7_IRQHandler+0x30>)
 8000be6:	f7ff ff5d 	bl	8000aa4 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000bea:	bf00      	nop
 8000bec:	4806      	ldr	r0, [pc, #24]	; (8000c08 <DMA1_Channel7_IRQHandler+0x34>)
 8000bee:	f7ff ff88 	bl	8000b02 <LL_USART_IsActiveFlag_TC>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f9      	beq.n	8000bec <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	4802      	ldr	r0, [pc, #8]	; (8000c04 <DMA1_Channel7_IRQHandler+0x30>)
 8000bfc:	f7ff fee8 	bl	80009d0 <LL_DMA_DisableChannel>
	}
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40004400 	.word	0x40004400

08000c0c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <USART2_IRQHandler+0x20>)
 8000c12:	f7ff ff63 	bl	8000adc <LL_USART_IsActiveFlag_IDLE>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d004      	beq.n	8000c26 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8000c1c:	f000 fede 	bl	80019dc <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <USART2_IRQHandler+0x20>)
 8000c22:	f7ff ff81 	bl	8000b28 <LL_USART_ClearFlag_IDLE>
	}
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40004400 	.word	0x40004400

08000c30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <LL_AHB1_GRP1_EnableClock>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d72:	695a      	ldr	r2, [r3, #20]
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4013      	ands	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40021000 	.word	0x40021000

08000d98 <LL_APB1_GRP1_EnableClock>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000da2:	69da      	ldr	r2, [r3, #28]
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dae:	69da      	ldr	r2, [r3, #28]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4013      	ands	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <LL_TIM_DisableARRPreload>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_TIM_OC_DisableFast>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d028      	beq.n	8000e4a <LL_TIM_OC_DisableFast+0x62>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	d023      	beq.n	8000e46 <LL_TIM_OC_DisableFast+0x5e>
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	2b10      	cmp	r3, #16
 8000e02:	d01e      	beq.n	8000e42 <LL_TIM_OC_DisableFast+0x5a>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2b40      	cmp	r3, #64	; 0x40
 8000e08:	d019      	beq.n	8000e3e <LL_TIM_OC_DisableFast+0x56>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e10:	d013      	beq.n	8000e3a <LL_TIM_OC_DisableFast+0x52>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e18:	d00d      	beq.n	8000e36 <LL_TIM_OC_DisableFast+0x4e>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e20:	d007      	beq.n	8000e32 <LL_TIM_OC_DisableFast+0x4a>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e28:	d101      	bne.n	8000e2e <LL_TIM_OC_DisableFast+0x46>
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	e00e      	b.n	8000e4c <LL_TIM_OC_DisableFast+0x64>
 8000e2e:	2308      	movs	r3, #8
 8000e30:	e00c      	b.n	8000e4c <LL_TIM_OC_DisableFast+0x64>
 8000e32:	2306      	movs	r3, #6
 8000e34:	e00a      	b.n	8000e4c <LL_TIM_OC_DisableFast+0x64>
 8000e36:	2305      	movs	r3, #5
 8000e38:	e008      	b.n	8000e4c <LL_TIM_OC_DisableFast+0x64>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e006      	b.n	8000e4c <LL_TIM_OC_DisableFast+0x64>
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e004      	b.n	8000e4c <LL_TIM_OC_DisableFast+0x64>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e002      	b.n	8000e4c <LL_TIM_OC_DisableFast+0x64>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <LL_TIM_OC_DisableFast+0x64>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3318      	adds	r3, #24
 8000e52:	4619      	mov	r1, r3
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LL_TIM_OC_DisableFast+0x9c>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	440b      	add	r3, r1
 8000e5c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	4908      	ldr	r1, [pc, #32]	; (8000e88 <LL_TIM_OC_DisableFast+0xa0>)
 8000e66:	5ccb      	ldrb	r3, [r1, r3]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	401a      	ands	r2, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	601a      	str	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	08002c34 	.word	0x08002c34
 8000e88:	08002c40 	.word	0x08002c40

08000e8c <LL_TIM_OC_EnablePreload>:
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d028      	beq.n	8000eee <LL_TIM_OC_EnablePreload+0x62>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d023      	beq.n	8000eea <LL_TIM_OC_EnablePreload+0x5e>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d01e      	beq.n	8000ee6 <LL_TIM_OC_EnablePreload+0x5a>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2b40      	cmp	r3, #64	; 0x40
 8000eac:	d019      	beq.n	8000ee2 <LL_TIM_OC_EnablePreload+0x56>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eb4:	d013      	beq.n	8000ede <LL_TIM_OC_EnablePreload+0x52>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ebc:	d00d      	beq.n	8000eda <LL_TIM_OC_EnablePreload+0x4e>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ec4:	d007      	beq.n	8000ed6 <LL_TIM_OC_EnablePreload+0x4a>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ecc:	d101      	bne.n	8000ed2 <LL_TIM_OC_EnablePreload+0x46>
 8000ece:	2307      	movs	r3, #7
 8000ed0:	e00e      	b.n	8000ef0 <LL_TIM_OC_EnablePreload+0x64>
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	e00c      	b.n	8000ef0 <LL_TIM_OC_EnablePreload+0x64>
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	e00a      	b.n	8000ef0 <LL_TIM_OC_EnablePreload+0x64>
 8000eda:	2305      	movs	r3, #5
 8000edc:	e008      	b.n	8000ef0 <LL_TIM_OC_EnablePreload+0x64>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e006      	b.n	8000ef0 <LL_TIM_OC_EnablePreload+0x64>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e004      	b.n	8000ef0 <LL_TIM_OC_EnablePreload+0x64>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e002      	b.n	8000ef0 <LL_TIM_OC_EnablePreload+0x64>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <LL_TIM_OC_EnablePreload+0x64>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3318      	adds	r3, #24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LL_TIM_OC_EnablePreload+0x98>)
 8000efc:	5cd3      	ldrb	r3, [r2, r3]
 8000efe:	440b      	add	r3, r1
 8000f00:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <LL_TIM_OC_EnablePreload+0x9c>)
 8000f0a:	5ccb      	ldrb	r3, [r1, r3]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2308      	movs	r3, #8
 8000f10:	408b      	lsls	r3, r1
 8000f12:	431a      	orrs	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	08002c34 	.word	0x08002c34
 8000f28:	08002c40 	.word	0x08002c40

08000f2c <LL_TIM_SetClockSource>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000f3e:	f023 0307 	bic.w	r3, r3, #7
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	609a      	str	r2, [r3, #8]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_TIM_SetTriggerOutput>:
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	605a      	str	r2, [r3, #4]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_TIM_DisableMasterSlaveMode>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000fa2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fdf6 	bl	8002bac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f7ff fee1 	bl	8000d98 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fd6:	f7ff fe3d 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe8d 	bl	8000d00 <NVIC_EncodePriority>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	201c      	movs	r0, #28
 8000fec:	f7ff fe5e 	bl	8000cac <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000ff0:	201c      	movs	r0, #28
 8000ff2:	f7ff fe3d 	bl	8000c70 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8000ff6:	f240 331f 	movw	r3, #799	; 0x31f
 8000ffa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8001000:	2363      	movs	r3, #99	; 0x63
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001008:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001012:	f001 f929 	bl	8002268 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001016:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800101a:	f7ff fed5 	bl	8000dc8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800101e:	2100      	movs	r1, #0
 8001020:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001024:	f7ff ff82 	bl	8000f2c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001028:	2101      	movs	r1, #1
 800102a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800102e:	f7ff ff2d 	bl	8000e8c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001032:	2360      	movs	r3, #96	; 0x60
 8001034:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	461a      	mov	r2, r3
 800104c:	2101      	movs	r1, #1
 800104e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001052:	f001 f97b 	bl	800234c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001056:	2101      	movs	r1, #1
 8001058:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800105c:	f7ff fec4 	bl	8000de8 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	461a      	mov	r2, r3
 800106a:	2110      	movs	r1, #16
 800106c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001070:	f001 f96c 	bl	800234c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001074:	2110      	movs	r1, #16
 8001076:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800107a:	f7ff feb5 	bl	8000de8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800107e:	2100      	movs	r1, #0
 8001080:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001084:	f7ff ff67 	bl	8000f56 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001088:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800108c:	f7ff ff76 	bl	8000f7c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001090:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001094:	f7ff fe68 	bl	8000d68 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001098:	2320      	movs	r3, #32
 800109a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800109c:	2302      	movs	r3, #2
 800109e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b8:	f000 fe2e 	bl	8001d18 <LL_GPIO_Init>

}
 80010bc:	bf00      	nop
 80010be:	3750      	adds	r7, #80	; 0x50
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <__NVIC_GetPriorityGrouping>:
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <LL_DMA_EnableChannel>:
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <LL_DMA_EnableChannel+0x3c>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	3a01      	subs	r2, #1
 80011f6:	4907      	ldr	r1, [pc, #28]	; (8001214 <LL_DMA_EnableChannel+0x3c>)
 80011f8:	5c8a      	ldrb	r2, [r1, r2]
 80011fa:	4611      	mov	r1, r2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	440a      	add	r2, r1
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6013      	str	r3, [r2, #0]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	08002c4c 	.word	0x08002c4c

08001218 <LL_DMA_DisableChannel>:
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LL_DMA_DisableChannel+0x3c>)
 8001228:	5cd3      	ldrb	r3, [r2, r3]
 800122a:	461a      	mov	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	3a01      	subs	r2, #1
 8001236:	4907      	ldr	r1, [pc, #28]	; (8001254 <LL_DMA_DisableChannel+0x3c>)
 8001238:	5c8a      	ldrb	r2, [r1, r2]
 800123a:	4611      	mov	r1, r2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	440a      	add	r2, r1
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	6013      	str	r3, [r2, #0]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	08002c4c 	.word	0x08002c4c

08001258 <LL_DMA_SetDataTransferDirection>:
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3b01      	subs	r3, #1
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LL_DMA_SetDataTransferDirection+0x48>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	461a      	mov	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001278:	f023 0310 	bic.w	r3, r3, #16
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	3a01      	subs	r2, #1
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <LL_DMA_SetDataTransferDirection+0x48>)
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	4611      	mov	r1, r2
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	440a      	add	r2, r1
 800128a:	4611      	mov	r1, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	08002c4c 	.word	0x08002c4c

080012a4 <LL_DMA_GetDataTransferDirection>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <LL_DMA_GetDataTransferDirection+0x2c>)
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f244 0310 	movw	r3, #16400	; 0x4010
 80012c2:	4013      	ands	r3, r2
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	08002c4c 	.word	0x08002c4c

080012d4 <LL_DMA_SetMode>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <LL_DMA_SetMode+0x44>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	461a      	mov	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 0220 	bic.w	r2, r3, #32
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	4907      	ldr	r1, [pc, #28]	; (8001318 <LL_DMA_SetMode+0x44>)
 80012fa:	5ccb      	ldrb	r3, [r1, r3]
 80012fc:	4619      	mov	r1, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	440b      	add	r3, r1
 8001302:	4619      	mov	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	08002c4c 	.word	0x08002c4c

0800131c <LL_DMA_SetPeriphIncMode>:
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <LL_DMA_SetPeriphIncMode+0x44>)
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	461a      	mov	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3b01      	subs	r3, #1
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <LL_DMA_SetPeriphIncMode+0x44>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	4619      	mov	r1, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	440b      	add	r3, r1
 800134a:	4619      	mov	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	08002c4c 	.word	0x08002c4c

08001364 <LL_DMA_SetMemoryIncMode>:
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	3b01      	subs	r3, #1
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <LL_DMA_SetMemoryIncMode+0x44>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3b01      	subs	r3, #1
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <LL_DMA_SetMemoryIncMode+0x44>)
 800138a:	5ccb      	ldrb	r3, [r1, r3]
 800138c:	4619      	mov	r1, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	440b      	add	r3, r1
 8001392:	4619      	mov	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	08002c4c 	.word	0x08002c4c

080013ac <LL_DMA_SetPeriphSize>:
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <LL_DMA_SetPeriphSize+0x44>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <LL_DMA_SetPeriphSize+0x44>)
 80013d2:	5ccb      	ldrb	r3, [r1, r3]
 80013d4:	4619      	mov	r1, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	440b      	add	r3, r1
 80013da:	4619      	mov	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	08002c4c 	.word	0x08002c4c

080013f4 <LL_DMA_SetMemorySize>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	3b01      	subs	r3, #1
 8001404:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <LL_DMA_SetMemorySize+0x44>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	461a      	mov	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3b01      	subs	r3, #1
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <LL_DMA_SetMemorySize+0x44>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	4619      	mov	r1, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	440b      	add	r3, r1
 8001422:	4619      	mov	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	08002c4c 	.word	0x08002c4c

0800143c <LL_DMA_SetChannelPriorityLevel>:
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3b01      	subs	r3, #1
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	461a      	mov	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3b01      	subs	r3, #1
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	4619      	mov	r1, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	440b      	add	r3, r1
 800146a:	4619      	mov	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	08002c4c 	.word	0x08002c4c

08001484 <LL_DMA_SetDataLength>:
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	3b01      	subs	r3, #1
 8001494:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <LL_DMA_SetDataLength+0x44>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	461a      	mov	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4413      	add	r3, r2
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	0c1b      	lsrs	r3, r3, #16
 80014a2:	041b      	lsls	r3, r3, #16
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	3a01      	subs	r2, #1
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <LL_DMA_SetDataLength+0x44>)
 80014aa:	5c8a      	ldrb	r2, [r1, r2]
 80014ac:	4611      	mov	r1, r2
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	440a      	add	r2, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	08002c4c 	.word	0x08002c4c

080014cc <LL_DMA_GetDataLength>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <LL_DMA_GetDataLength+0x28>)
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	b29b      	uxth	r3, r3
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	08002c4c 	.word	0x08002c4c

080014f8 <LL_DMA_ConfigAddresses>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b10      	cmp	r3, #16
 800150a:	d114      	bne.n	8001536 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	3b01      	subs	r3, #1
 8001510:	4a16      	ldr	r2, [pc, #88]	; (800156c <LL_DMA_ConfigAddresses+0x74>)
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	461a      	mov	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	461a      	mov	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	3b01      	subs	r3, #1
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <LL_DMA_ConfigAddresses+0x74>)
 8001526:	5cd3      	ldrb	r3, [r2, r3]
 8001528:	461a      	mov	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4413      	add	r3, r2
 800152e:	461a      	mov	r2, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	6093      	str	r3, [r2, #8]
}
 8001534:	e013      	b.n	800155e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3b01      	subs	r3, #1
 800153a:	4a0c      	ldr	r2, [pc, #48]	; (800156c <LL_DMA_ConfigAddresses+0x74>)
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	461a      	mov	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3b01      	subs	r3, #1
 800154e:	4a07      	ldr	r2, [pc, #28]	; (800156c <LL_DMA_ConfigAddresses+0x74>)
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	461a      	mov	r2, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	60d3      	str	r3, [r2, #12]
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	08002c4c 	.word	0x08002c4c

08001570 <LL_DMA_IsActiveFlag_TC6>:
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001584:	bf0c      	ite	eq
 8001586:	2301      	moveq	r3, #1
 8001588:	2300      	movne	r3, #0
 800158a:	b2db      	uxtb	r3, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <LL_DMA_EnableIT_TC+0x3c>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	3a01      	subs	r2, #1
 80015b6:	4907      	ldr	r1, [pc, #28]	; (80015d4 <LL_DMA_EnableIT_TC+0x3c>)
 80015b8:	5c8a      	ldrb	r2, [r1, r2]
 80015ba:	4611      	mov	r1, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	440a      	add	r2, r1
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6013      	str	r3, [r2, #0]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	08002c4c 	.word	0x08002c4c

080015d8 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LL_DMA_EnableIT_HT+0x3c>)
 80015e8:	5cd3      	ldrb	r3, [r2, r3]
 80015ea:	461a      	mov	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	3a01      	subs	r2, #1
 80015f6:	4907      	ldr	r1, [pc, #28]	; (8001614 <LL_DMA_EnableIT_HT+0x3c>)
 80015f8:	5c8a      	ldrb	r2, [r1, r2]
 80015fa:	4611      	mov	r1, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	440a      	add	r2, r1
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6013      	str	r3, [r2, #0]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	08002c4c 	.word	0x08002c4c

08001618 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <LL_DMA_EnableIT_TE+0x3c>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	3a01      	subs	r2, #1
 8001636:	4907      	ldr	r1, [pc, #28]	; (8001654 <LL_DMA_EnableIT_TE+0x3c>)
 8001638:	5c8a      	ldrb	r2, [r1, r2]
 800163a:	4611      	mov	r1, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	440a      	add	r2, r1
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	08002c4c 	.word	0x08002c4c

08001658 <LL_AHB1_GRP1_EnableClock>:
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001662:	695a      	ldr	r2, [r3, #20]
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4313      	orrs	r3, r2
 800166a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4013      	ands	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	40021000 	.word	0x40021000

08001688 <LL_APB1_GRP1_EnableClock>:
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800169e:	69da      	ldr	r2, [r3, #28]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4013      	ands	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40021000 	.word	0x40021000

080016b8 <LL_USART_Enable>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	601a      	str	r2, [r3, #0]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_USART_ConfigAsyncMode>:
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	e853 3f00 	ldrex	r3, [r3]
 8001716:	60bb      	str	r3, [r7, #8]
   return(result);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	61fb      	str	r3, [r7, #28]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	61ba      	str	r2, [r7, #24]
 8001726:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001728:	6979      	ldr	r1, [r7, #20]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	e841 2300 	strex	r3, r2, [r1]
 8001730:	613b      	str	r3, [r7, #16]
   return(result);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e9      	bne.n	800170c <LL_USART_EnableIT_IDLE+0x8>
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001746:	b480      	push	{r7}
 8001748:	b089      	sub	sp, #36	; 0x24
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3308      	adds	r3, #8
 8001752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	e853 3f00 	ldrex	r3, [r3]
 800175a:	60bb      	str	r3, [r7, #8]
   return(result);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3308      	adds	r3, #8
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	61ba      	str	r2, [r7, #24]
 800176c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800176e:	6979      	ldr	r1, [r7, #20]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	e841 2300 	strex	r3, r2, [r1]
 8001776:	613b      	str	r3, [r7, #16]
   return(result);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1e7      	bne.n	800174e <LL_USART_DisableIT_CTS+0x8>
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	3724      	adds	r7, #36	; 0x24
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3308      	adds	r3, #8
 8001798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	e853 3f00 	ldrex	r3, [r3]
 80017a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3308      	adds	r3, #8
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	61ba      	str	r2, [r7, #24]
 80017b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017b4:	6979      	ldr	r1, [r7, #20]
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	e841 2300 	strex	r3, r2, [r1]
 80017bc:	613b      	str	r3, [r7, #16]
   return(result);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e7      	bne.n	8001794 <LL_USART_EnableDMAReq_RX+0x8>
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b085      	sub	sp, #20
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d103      	bne.n	80017ea <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3328      	adds	r3, #40	; 0x28
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e002      	b.n	80017f0 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3324      	adds	r3, #36	; 0x24
 80017ee:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a03      	ldr	r2, [pc, #12]	; (8001820 <USART2_RegisterCallback+0x20>)
 8001812:	6013      	str	r3, [r2, #0]
	}
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	2000003c 	.word	0x2000003c

08001824 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	b090      	sub	sp, #64	; 0x40
 8001828:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800184e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001852:	f7ff ff19 	bl	8001688 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001856:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800185a:	f7ff fefd 	bl	8001658 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800185e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001862:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001864:	2302      	movs	r3, #2
 8001866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001874:	2307      	movs	r3, #7
 8001876:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	4619      	mov	r1, r3
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f000 fa4a 	bl	8001d18 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001884:	2200      	movs	r2, #0
 8001886:	2106      	movs	r1, #6
 8001888:	4851      	ldr	r0, [pc, #324]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 800188a:	f7ff fce5 	bl	8001258 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 800188e:	2200      	movs	r2, #0
 8001890:	2106      	movs	r1, #6
 8001892:	484f      	ldr	r0, [pc, #316]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 8001894:	f7ff fdd2 	bl	800143c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001898:	2200      	movs	r2, #0
 800189a:	2106      	movs	r1, #6
 800189c:	484c      	ldr	r0, [pc, #304]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 800189e:	f7ff fd19 	bl	80012d4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2106      	movs	r1, #6
 80018a6:	484a      	ldr	r0, [pc, #296]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 80018a8:	f7ff fd38 	bl	800131c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	2106      	movs	r1, #6
 80018b0:	4847      	ldr	r0, [pc, #284]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 80018b2:	f7ff fd57 	bl	8001364 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2106      	movs	r1, #6
 80018ba:	4845      	ldr	r0, [pc, #276]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 80018bc:	f7ff fd76 	bl	80013ac <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2106      	movs	r1, #6
 80018c4:	4842      	ldr	r0, [pc, #264]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 80018c6:	f7ff fd95 	bl	80013f4 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 80018ca:	2101      	movs	r1, #1
 80018cc:	4841      	ldr	r0, [pc, #260]	; (80019d4 <MX_USART2_UART_Init+0x1b0>)
 80018ce:	f7ff ff80 	bl	80017d2 <LL_USART_DMA_GetRegAddr>
 80018d2:	4604      	mov	r4, r0
 80018d4:	4d40      	ldr	r5, [pc, #256]	; (80019d8 <MX_USART2_UART_Init+0x1b4>)
 80018d6:	2106      	movs	r1, #6
 80018d8:	483d      	ldr	r0, [pc, #244]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 80018da:	f7ff fce3 	bl	80012a4 <LL_DMA_GetDataTransferDirection>
 80018de:	4603      	mov	r3, r0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	462b      	mov	r3, r5
 80018e4:	4622      	mov	r2, r4
 80018e6:	2106      	movs	r1, #6
 80018e8:	4839      	ldr	r0, [pc, #228]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 80018ea:	f7ff fe05 	bl	80014f8 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, 20);
 80018ee:	2214      	movs	r2, #20
 80018f0:	2106      	movs	r1, #6
 80018f2:	4837      	ldr	r0, [pc, #220]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 80018f4:	f7ff fdc6 	bl	8001484 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80018f8:	2106      	movs	r1, #6
 80018fa:	4835      	ldr	r0, [pc, #212]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 80018fc:	f7ff fc6c 	bl	80011d8 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001900:	4834      	ldr	r0, [pc, #208]	; (80019d4 <MX_USART2_UART_Init+0x1b0>)
 8001902:	f7ff ff43 	bl	800178c <LL_USART_EnableDMAReq_RX>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001906:	2106      	movs	r1, #6
 8001908:	4831      	ldr	r0, [pc, #196]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 800190a:	f7ff fe45 	bl	8001598 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 800190e:	2106      	movs	r1, #6
 8001910:	482f      	ldr	r0, [pc, #188]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 8001912:	f7ff fe61 	bl	80015d8 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001916:	2210      	movs	r2, #16
 8001918:	2107      	movs	r1, #7
 800191a:	482d      	ldr	r0, [pc, #180]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 800191c:	f7ff fc9c 	bl	8001258 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8001920:	2200      	movs	r2, #0
 8001922:	2107      	movs	r1, #7
 8001924:	482a      	ldr	r0, [pc, #168]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 8001926:	f7ff fd89 	bl	800143c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800192a:	2200      	movs	r2, #0
 800192c:	2107      	movs	r1, #7
 800192e:	4828      	ldr	r0, [pc, #160]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 8001930:	f7ff fcd0 	bl	80012d4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001934:	2200      	movs	r2, #0
 8001936:	2107      	movs	r1, #7
 8001938:	4825      	ldr	r0, [pc, #148]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 800193a:	f7ff fcef 	bl	800131c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	2107      	movs	r1, #7
 8001942:	4823      	ldr	r0, [pc, #140]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 8001944:	f7ff fd0e 	bl	8001364 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001948:	2200      	movs	r2, #0
 800194a:	2107      	movs	r1, #7
 800194c:	4820      	ldr	r0, [pc, #128]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 800194e:	f7ff fd2d 	bl	80013ac <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001952:	2200      	movs	r2, #0
 8001954:	2107      	movs	r1, #7
 8001956:	481e      	ldr	r0, [pc, #120]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 8001958:	f7ff fd4c 	bl	80013f4 <LL_DMA_SetMemorySize>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800195c:	2107      	movs	r1, #7
 800195e:	481c      	ldr	r0, [pc, #112]	; (80019d0 <MX_USART2_UART_Init+0x1ac>)
 8001960:	f7ff fe5a 	bl	8001618 <LL_DMA_EnableIT_TE>
  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001964:	f7ff fbae 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001968:	4603      	mov	r3, r0
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fbfe 	bl	8001170 <NVIC_EncodePriority>
 8001974:	4603      	mov	r3, r0
 8001976:	4619      	mov	r1, r3
 8001978:	2026      	movs	r0, #38	; 0x26
 800197a:	f7ff fbcf 	bl	800111c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800197e:	2026      	movs	r0, #38	; 0x26
 8001980:	f7ff fbae 	bl	80010e0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001984:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001988:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001996:	230c      	movs	r3, #12
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800199a:	2300      	movs	r3, #0
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	480a      	ldr	r0, [pc, #40]	; (80019d4 <MX_USART2_UART_Init+0x1b0>)
 80019aa:	f001 f837 	bl	8002a1c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80019ae:	4809      	ldr	r0, [pc, #36]	; (80019d4 <MX_USART2_UART_Init+0x1b0>)
 80019b0:	f7ff fec9 	bl	8001746 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80019b4:	4807      	ldr	r0, [pc, #28]	; (80019d4 <MX_USART2_UART_Init+0x1b0>)
 80019b6:	f7ff fe8f 	bl	80016d8 <LL_USART_ConfigAsyncMode>
  LL_USART_EnableIT_IDLE(USART2);
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <MX_USART2_UART_Init+0x1b0>)
 80019bc:	f7ff fea2 	bl	8001704 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <MX_USART2_UART_Init+0x1b0>)
 80019c2:	f7ff fe79 	bl	80016b8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	3738      	adds	r7, #56	; 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bdb0      	pop	{r4, r5, r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40004400 	.word	0x40004400
 80019d8:	2000005c 	.word	0x2000005c

080019dc <USART2_CheckDmaReception>:

/* USER CODE BEGIN 1 */
void USART2_CheckDmaReception(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
	if(USART2_ProcessData == 0) return;
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <USART2_CheckDmaReception+0x74>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d02d      	beq.n	8001a46 <USART2_CheckDmaReception+0x6a>
    new = 20 - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80019ea:	2106      	movs	r1, #6
 80019ec:	4819      	ldr	r0, [pc, #100]	; (8001a54 <USART2_CheckDmaReception+0x78>)
 80019ee:	f7ff fd6d 	bl	80014cc <LL_DMA_GetDataLength>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f1c3 0314 	rsb	r3, r3, #20
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <USART2_CheckDmaReception+0x7c>)
 80019fc:	601a      	str	r2, [r3, #0]

	for(int i = old ; i < new ; i++){
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <USART2_CheckDmaReception+0x80>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	e00a      	b.n	8001a1c <USART2_CheckDmaReception+0x40>
		USART2_ProcessData(bufferUSART2dma[i]);
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <USART2_CheckDmaReception+0x74>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4915      	ldr	r1, [pc, #84]	; (8001a60 <USART2_CheckDmaReception+0x84>)
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	440a      	add	r2, r1
 8001a10:	7812      	ldrb	r2, [r2, #0]
 8001a12:	4610      	mov	r0, r2
 8001a14:	4798      	blx	r3
	for(int i = old ; i < new ; i++){
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <USART2_CheckDmaReception+0x7c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dbef      	blt.n	8001a06 <USART2_CheckDmaReception+0x2a>
	}
	old = new;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <USART2_CheckDmaReception+0x7c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <USART2_CheckDmaReception+0x80>)
 8001a2c:	6013      	str	r3, [r2, #0]
	if(LL_DMA_IsActiveFlag_TC6(DMA1)){
 8001a2e:	4809      	ldr	r0, [pc, #36]	; (8001a54 <USART2_CheckDmaReception+0x78>)
 8001a30:	f7ff fd9e 	bl	8001570 <LL_DMA_IsActiveFlag_TC6>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <USART2_CheckDmaReception+0x6c>
		DMA_channel_reset();
 8001a3a:	f000 f813 	bl	8001a64 <DMA_channel_reset>
		old = 0;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <USART2_CheckDmaReception+0x80>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e000      	b.n	8001a48 <USART2_CheckDmaReception+0x6c>
	if(USART2_ProcessData == 0) return;
 8001a46:	bf00      	nop
	 }
}
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000003c 	.word	0x2000003c
 8001a54:	40020000 	.word	0x40020000
 8001a58:	20000044 	.word	0x20000044
 8001a5c:	20000040 	.word	0x20000040
 8001a60:	2000005c 	.word	0x2000005c

08001a64 <DMA_channel_reset>:

void DMA_channel_reset()
{
 8001a64:	b5b0      	push	{r4, r5, r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af02      	add	r7, sp, #8
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001a6a:	2106      	movs	r1, #6
 8001a6c:	4810      	ldr	r0, [pc, #64]	; (8001ab0 <DMA_channel_reset+0x4c>)
 8001a6e:	f7ff fbd3 	bl	8001218 <LL_DMA_DisableChannel>
	LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001a72:	2101      	movs	r1, #1
 8001a74:	480f      	ldr	r0, [pc, #60]	; (8001ab4 <DMA_channel_reset+0x50>)
 8001a76:	f7ff feac 	bl	80017d2 <LL_USART_DMA_GetRegAddr>
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	4d0e      	ldr	r5, [pc, #56]	; (8001ab8 <DMA_channel_reset+0x54>)
 8001a7e:	2106      	movs	r1, #6
 8001a80:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <DMA_channel_reset+0x4c>)
 8001a82:	f7ff fc0f 	bl	80012a4 <LL_DMA_GetDataTransferDirection>
 8001a86:	4603      	mov	r3, r0
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	462b      	mov	r3, r5
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	2106      	movs	r1, #6
 8001a90:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <DMA_channel_reset+0x4c>)
 8001a92:	f7ff fd31 	bl	80014f8 <LL_DMA_ConfigAddresses>
	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),(uint32_t)bufferUSART2dma,LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, 20);
 8001a96:	2214      	movs	r2, #20
 8001a98:	2106      	movs	r1, #6
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <DMA_channel_reset+0x4c>)
 8001a9c:	f7ff fcf2 	bl	8001484 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001aa0:	2106      	movs	r1, #6
 8001aa2:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <DMA_channel_reset+0x4c>)
 8001aa4:	f7ff fb98 	bl	80011d8 <LL_DMA_EnableChannel>
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bdb0      	pop	{r4, r5, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40004400 	.word	0x40004400
 8001ab8:	2000005c 	.word	0x2000005c

08001abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480d      	ldr	r0, [pc, #52]	; (8001af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ac2:	490e      	ldr	r1, [pc, #56]	; (8001afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <LoopForever+0xe>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad8:	4c0b      	ldr	r4, [pc, #44]	; (8001b08 <LoopForever+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ae6:	f7ff f8a3 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aea:	f001 f83b 	bl	8002b64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aee:	f7fe fe1f 	bl	8000730 <main>

08001af2 <LoopForever>:

LoopForever:
    b LoopForever
 8001af2:	e7fe      	b.n	8001af2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001af4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001b00:	08002c5c 	.word	0x08002c5c
  ldr r2, =_sbss
 8001b04:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001b08:	20000070 	.word	0x20000070

08001b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC1_2_IRQHandler>

08001b0e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b089      	sub	sp, #36	; 0x24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	613b      	str	r3, [r7, #16]
  return result;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2103      	movs	r1, #3
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	61bb      	str	r3, [r7, #24]
  return result;
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	3724      	adds	r7, #36	; 0x24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	401a      	ands	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	605a      	str	r2, [r3, #4]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	613b      	str	r3, [r7, #16]
  return result;
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	fab3 f383 	clz	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	61bb      	str	r3, [r7, #24]
  return result;
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	431a      	orrs	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001bee:	bf00      	nop
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b089      	sub	sp, #36	; 0x24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	613b      	str	r3, [r7, #16]
  return result;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2103      	movs	r1, #3
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	401a      	ands	r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	61bb      	str	r3, [r7, #24]
  return result;
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	431a      	orrs	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	60da      	str	r2, [r3, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3724      	adds	r7, #36	; 0x24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a1a      	ldr	r2, [r3, #32]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	613b      	str	r3, [r7, #16]
  return result;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	210f      	movs	r1, #15
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	61bb      	str	r3, [r7, #24]
  return result;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001caa:	bf00      	nop
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b089      	sub	sp, #36	; 0x24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	613b      	str	r3, [r7, #16]
  return result;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	fab3 f383 	clz	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	210f      	movs	r1, #15
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	61bb      	str	r3, [r7, #24]
  return result;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	431a      	orrs	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001d0c:	bf00      	nop
 8001d0e:	3724      	adds	r7, #36	; 0x24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	613b      	str	r3, [r7, #16]
  return result;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001d3a:	e051      	b.n	8001de0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d043      	beq.n	8001dda <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d003      	beq.n	8001d62 <LL_GPIO_Init+0x4a>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d10e      	bne.n	8001d80 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	461a      	mov	r2, r3
 8001d68:	69b9      	ldr	r1, [r7, #24]
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ff16 	bl	8001b9c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fef6 	bl	8001b6c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	461a      	mov	r2, r3
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff36 	bl	8001bfa <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d11a      	bne.n	8001dcc <LL_GPIO_Init+0xb4>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	60bb      	str	r3, [r7, #8]
  return result;
 8001da2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b07      	cmp	r3, #7
 8001dac:	d807      	bhi.n	8001dbe <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	461a      	mov	r2, r3
 8001db4:	69b9      	ldr	r1, [r7, #24]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff4e 	bl	8001c58 <LL_GPIO_SetAFPin_0_7>
 8001dbc:	e006      	b.n	8001dcc <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	69b9      	ldr	r1, [r7, #24]
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ff75 	bl	8001cb6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	69b9      	ldr	r1, [r7, #24]
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff fe9a 	bl	8001b0e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1a6      	bne.n	8001d3c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <LL_RCC_HSI_IsReady>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <LL_RCC_HSI_IsReady+0x20>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40021000 	.word	0x40021000

08001e1c <LL_RCC_LSE_IsReady>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <LL_RCC_LSE_IsReady+0x20>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40021000 	.word	0x40021000

08001e40 <LL_RCC_GetSysClkSource>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <LL_RCC_GetSysClkSource+0x18>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000

08001e5c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <LL_RCC_GetAHBPrescaler+0x18>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000

08001e78 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000

08001e94 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <LL_RCC_GetAPB2Prescaler+0x18>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000

08001eb0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <LL_RCC_GetUSARTClockSource+0x28>)
 8001eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	4313      	orrs	r3, r2
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40021000 	.word	0x40021000

08001edc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <LL_RCC_PLL_GetMainSource+0x18>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <LL_RCC_PLL_GetPrediv+0x18>)
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f003 030f 	and.w	r3, r3, #15
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000

08001f30 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001f38:	f000 f864 	bl	8002004 <RCC_GetSystemClockFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f882 	bl	8002050 <RCC_GetHCLKClockFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f890 	bl	800207c <RCC_GetPCLK1ClockFreq>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f89c 	bl	80020a4 <RCC_GetPCLK2ClockFreq>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60da      	str	r2, [r3, #12]
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d12d      	bne.n	8001fea <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ff8e 	bl	8001eb0 <LL_RCC_GetUSARTClockSource>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d00a      	beq.n	8001fb0 <LL_RCC_GetUSARTClockFreq+0x34>
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d819      	bhi.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x56>
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d002      	beq.n	8001fa8 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d00c      	beq.n	8001fc0 <LL_RCC_GetUSARTClockFreq+0x44>
 8001fa6:	e014      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001fa8:	f000 f82c 	bl	8002004 <RCC_GetSystemClockFreq>
 8001fac:	60f8      	str	r0, [r7, #12]
        break;
 8001fae:	e021      	b.n	8001ff4 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001fb0:	f7ff ff22 	bl	8001df8 <LL_RCC_HSI_IsReady>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d019      	beq.n	8001fee <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <LL_RCC_GetUSARTClockFreq+0x84>)
 8001fbc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001fbe:	e016      	b.n	8001fee <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001fc0:	f7ff ff2c 	bl	8001e1c <LL_RCC_LSE_IsReady>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d013      	beq.n	8001ff2 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8001fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fce:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001fd0:	e00f      	b.n	8001ff2 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001fd2:	f000 f817 	bl	8002004 <RCC_GetSystemClockFreq>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f839 	bl	8002050 <RCC_GetHCLKClockFreq>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f84b 	bl	800207c <RCC_GetPCLK1ClockFreq>
 8001fe6:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001fe8:	e004      	b.n	8001ff4 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8001fea:	bf00      	nop
 8001fec:	e002      	b.n	8001ff4 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001fee:	bf00      	nop
 8001ff0:	e000      	b.n	8001ff4 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001ff2:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	007a1200 	.word	0x007a1200

08002004 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800200e:	f7ff ff17 	bl	8001e40 <LL_RCC_GetSysClkSource>
 8002012:	4603      	mov	r3, r0
 8002014:	2b08      	cmp	r3, #8
 8002016:	d00c      	beq.n	8002032 <RCC_GetSystemClockFreq+0x2e>
 8002018:	2b08      	cmp	r3, #8
 800201a:	d80e      	bhi.n	800203a <RCC_GetSystemClockFreq+0x36>
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <RCC_GetSystemClockFreq+0x22>
 8002020:	2b04      	cmp	r3, #4
 8002022:	d003      	beq.n	800202c <RCC_GetSystemClockFreq+0x28>
 8002024:	e009      	b.n	800203a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <RCC_GetSystemClockFreq+0x48>)
 8002028:	607b      	str	r3, [r7, #4]
      break;
 800202a:	e009      	b.n	8002040 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <RCC_GetSystemClockFreq+0x48>)
 800202e:	607b      	str	r3, [r7, #4]
      break;
 8002030:	e006      	b.n	8002040 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002032:	f000 f84b 	bl	80020cc <RCC_PLL_GetFreqDomain_SYS>
 8002036:	6078      	str	r0, [r7, #4]
      break;
 8002038:	e002      	b.n	8002040 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <RCC_GetSystemClockFreq+0x48>)
 800203c:	607b      	str	r3, [r7, #4]
      break;
 800203e:	bf00      	nop
  }

  return frequency;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	007a1200 	.word	0x007a1200

08002050 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002058:	f7ff ff00 	bl	8001e5c <LL_RCC_GetAHBPrescaler>
 800205c:	4603      	mov	r3, r0
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <RCC_GetHCLKClockFreq+0x28>)
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	461a      	mov	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	40d3      	lsrs	r3, r2
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	08002c1c 	.word	0x08002c1c

0800207c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002084:	f7ff fef8 	bl	8001e78 <LL_RCC_GetAPB1Prescaler>
 8002088:	4603      	mov	r3, r0
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <RCC_GetPCLK1ClockFreq+0x24>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	40d3      	lsrs	r3, r2
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	08002c2c 	.word	0x08002c2c

080020a4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80020ac:	f7ff fef2 	bl	8001e94 <LL_RCC_GetAPB2Prescaler>
 80020b0:	4603      	mov	r3, r0
 80020b2:	0adb      	lsrs	r3, r3, #11
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <RCC_GetPCLK2ClockFreq+0x24>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	461a      	mov	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	40d3      	lsrs	r3, r2
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	08002c2c 	.word	0x08002c2c

080020cc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80020da:	f7ff feff 	bl	8001edc <LL_RCC_PLL_GetMainSource>
 80020de:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d003      	beq.n	80020f6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80020ee:	e005      	b.n	80020fc <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80020f2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80020f4:	e005      	b.n	8002102 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80020f8:	60fb      	str	r3, [r7, #12]
      break;
 80020fa:	e002      	b.n	8002102 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80020fc:	4b10      	ldr	r3, [pc, #64]	; (8002140 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80020fe:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002100:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002102:	f7ff ff07 	bl	8001f14 <LL_RCC_PLL_GetPrediv>
 8002106:	4603      	mov	r3, r0
 8002108:	3301      	adds	r3, #1
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	fbb2 f4f3 	udiv	r4, r2, r3
 8002110:	f7ff fef2 	bl	8001ef8 <LL_RCC_PLL_GetMultiplicator>
 8002114:	4603      	mov	r3, r0
 8002116:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800211a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800211e:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	fa92 f2a2 	rbit	r2, r2
 8002126:	603a      	str	r2, [r7, #0]
  return result;
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	fab2 f282 	clz	r2, r2
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	40d3      	lsrs	r3, r2
 8002132:	3302      	adds	r3, #2
 8002134:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bd90      	pop	{r4, r7, pc}
 8002140:	003d0900 	.word	0x003d0900
 8002144:	007a1200 	.word	0x007a1200

08002148 <LL_TIM_SetPrescaler>:
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_TIM_SetAutoReload>:
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_TIM_SetRepetitionCounter>:
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_TIM_OC_SetCompareCH1>:
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_TIM_OC_SetCompareCH2>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_TIM_OC_SetCompareCH3>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_TIM_OC_SetCompareCH4>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_TIM_OC_SetCompareCH5>:
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_TIM_OC_SetCompareCH6>:
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	615a      	str	r2, [r3, #20]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <LL_TIM_Init+0xd0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d007      	beq.n	8002290 <LL_TIM_Init+0x28>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002286:	d003      	beq.n	8002290 <LL_TIM_Init+0x28>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a2c      	ldr	r2, [pc, #176]	; (800233c <LL_TIM_Init+0xd4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d106      	bne.n	800229e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a25      	ldr	r2, [pc, #148]	; (8002338 <LL_TIM_Init+0xd0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <LL_TIM_Init+0x66>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d00f      	beq.n	80022ce <LL_TIM_Init+0x66>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a22      	ldr	r2, [pc, #136]	; (800233c <LL_TIM_Init+0xd4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00b      	beq.n	80022ce <LL_TIM_Init+0x66>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a21      	ldr	r2, [pc, #132]	; (8002340 <LL_TIM_Init+0xd8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <LL_TIM_Init+0x66>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a20      	ldr	r2, [pc, #128]	; (8002344 <LL_TIM_Init+0xdc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d003      	beq.n	80022ce <LL_TIM_Init+0x66>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <LL_TIM_Init+0xe0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d106      	bne.n	80022dc <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4619      	mov	r1, r3
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff3b 	bl	8002164 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff27 	bl	8002148 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <LL_TIM_Init+0xd0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00b      	beq.n	800231a <LL_TIM_Init+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <LL_TIM_Init+0xd8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <LL_TIM_Init+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <LL_TIM_Init+0xdc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d003      	beq.n	800231a <LL_TIM_Init+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <LL_TIM_Init+0xe0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d105      	bne.n	8002326 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	4619      	mov	r1, r3
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff2d 	bl	8002180 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff8e 	bl	8002248 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40000400 	.word	0x40000400
 8002340:	40014000 	.word	0x40014000
 8002344:	40014400 	.word	0x40014400
 8002348:	40014800 	.word	0x40014800

0800234c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002362:	d045      	beq.n	80023f0 <LL_TIM_OC_Init+0xa4>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800236a:	d848      	bhi.n	80023fe <LL_TIM_OC_Init+0xb2>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002372:	d036      	beq.n	80023e2 <LL_TIM_OC_Init+0x96>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237a:	d840      	bhi.n	80023fe <LL_TIM_OC_Init+0xb2>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002382:	d027      	beq.n	80023d4 <LL_TIM_OC_Init+0x88>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238a:	d838      	bhi.n	80023fe <LL_TIM_OC_Init+0xb2>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002392:	d018      	beq.n	80023c6 <LL_TIM_OC_Init+0x7a>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239a:	d830      	bhi.n	80023fe <LL_TIM_OC_Init+0xb2>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d003      	beq.n	80023aa <LL_TIM_OC_Init+0x5e>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d007      	beq.n	80023b8 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80023a8:	e029      	b.n	80023fe <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f82d 	bl	800240c <OC1Config>
 80023b2:	4603      	mov	r3, r0
 80023b4:	75fb      	strb	r3, [r7, #23]
      break;
 80023b6:	e023      	b.n	8002400 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f8a0 	bl	8002500 <OC2Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	75fb      	strb	r3, [r7, #23]
      break;
 80023c4:	e01c      	b.n	8002400 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f917 	bl	80025fc <OC3Config>
 80023ce:	4603      	mov	r3, r0
 80023d0:	75fb      	strb	r3, [r7, #23]
      break;
 80023d2:	e015      	b.n	8002400 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f98e 	bl	80026f8 <OC4Config>
 80023dc:	4603      	mov	r3, r0
 80023de:	75fb      	strb	r3, [r7, #23]
      break;
 80023e0:	e00e      	b.n	8002400 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f9ed 	bl	80027c4 <OC5Config>
 80023ea:	4603      	mov	r3, r0
 80023ec:	75fb      	strb	r3, [r7, #23]
      break;
 80023ee:	e007      	b.n	8002400 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa44 	bl	8002880 <OC6Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	75fb      	strb	r3, [r7, #23]
      break;
 80023fc:	e000      	b.n	8002400 <LL_TIM_OC_Init+0xb4>
      break;
 80023fe:	bf00      	nop
  }

  return result;
 8002400:	7dfb      	ldrb	r3, [r7, #23]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	f023 0201 	bic.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f023 0202 	bic.w	r2, r3, #2
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f023 0201 	bic.w	r2, r3, #1
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <OC1Config+0xe4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00b      	beq.n	800248a <OC1Config+0x7e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <OC1Config+0xe8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <OC1Config+0x7e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1e      	ldr	r2, [pc, #120]	; (80024f8 <OC1Config+0xec>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d003      	beq.n	800248a <OC1Config+0x7e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <OC1Config+0xf0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d11e      	bne.n	80024c8 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f023 0208 	bic.w	r2, r3, #8
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f023 0204 	bic.w	r2, r3, #4
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4313      	orrs	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fe5e 	bl	800219c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40014000 	.word	0x40014000
 80024f8:	40014400 	.word	0x40014400
 80024fc:	40014800 	.word	0x40014800

08002500 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f023 0210 	bic.w	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	0212      	lsls	r2, r2, #8
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f023 0220 	bic.w	r2, r3, #32
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0210 	bic.w	r2, r3, #16
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <OC2Config+0xec>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00b      	beq.n	8002584 <OC2Config+0x84>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a20      	ldr	r2, [pc, #128]	; (80025f0 <OC2Config+0xf0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <OC2Config+0x84>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <OC2Config+0xf4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <OC2Config+0x84>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <OC2Config+0xf8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d11f      	bne.n	80025c4 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	019b      	lsls	r3, r3, #6
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	019b      	lsls	r3, r3, #6
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fdee 	bl	80021b8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40014000 	.word	0x40014000
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800

080025fc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <OC3Config+0xec>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00b      	beq.n	800267e <OC3Config+0x82>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a20      	ldr	r2, [pc, #128]	; (80026ec <OC3Config+0xf0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <OC3Config+0x82>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <OC3Config+0xf4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <OC3Config+0x82>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <OC3Config+0xf8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d11f      	bne.n	80026be <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	029b      	lsls	r3, r3, #10
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	029b      	lsls	r3, r3, #10
 800269a:	4313      	orrs	r3, r2
 800269c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	015b      	lsls	r3, r3, #5
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	4619      	mov	r1, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fd7f 	bl	80021d4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40014000 	.word	0x40014000
 80026f0:	40014400 	.word	0x40014400
 80026f4:	40014800 	.word	0x40014800

080026f8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800272e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	0212      	lsls	r2, r2, #8
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	031b      	lsls	r3, r3, #12
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	031b      	lsls	r3, r3, #12
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <OC4Config+0xbc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00b      	beq.n	800277c <OC4Config+0x84>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <OC4Config+0xc0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <OC4Config+0x84>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a13      	ldr	r2, [pc, #76]	; (80027bc <OC4Config+0xc4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <OC4Config+0x84>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <OC4Config+0xc8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d107      	bne.n	800278c <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	019b      	lsls	r3, r3, #6
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fd26 	bl	80021f0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40014000 	.word	0x40014000
 80027bc:	40014400 	.word	0x40014400
 80027c0:	40014800 	.word	0x40014800

080027c4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a15      	ldr	r2, [pc, #84]	; (8002870 <OC5Config+0xac>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00b      	beq.n	8002838 <OC5Config+0x74>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a14      	ldr	r2, [pc, #80]	; (8002874 <OC5Config+0xb0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d007      	beq.n	8002838 <OC5Config+0x74>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a13      	ldr	r2, [pc, #76]	; (8002878 <OC5Config+0xb4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <OC5Config+0x74>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <OC5Config+0xb8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d109      	bne.n	800284c <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff fcd7 	bl	800220c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40014000 	.word	0x40014000
 8002878:	40014400 	.word	0x40014400
 800287c:	40014800 	.word	0x40014800

08002880 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	0212      	lsls	r2, r2, #8
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	051b      	lsls	r3, r3, #20
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	051b      	lsls	r3, r3, #20
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a14      	ldr	r2, [pc, #80]	; (800292c <OC6Config+0xac>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00b      	beq.n	80028f6 <OC6Config+0x76>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a13      	ldr	r2, [pc, #76]	; (8002930 <OC6Config+0xb0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <OC6Config+0x76>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a12      	ldr	r2, [pc, #72]	; (8002934 <OC6Config+0xb4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <OC6Config+0x76>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a11      	ldr	r2, [pc, #68]	; (8002938 <OC6Config+0xb8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d109      	bne.n	800290a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	029b      	lsls	r3, r3, #10
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff fc88 	bl	800222c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40014000 	.word	0x40014000
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800

0800293c <LL_USART_IsEnabled>:
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <LL_USART_IsEnabled+0x18>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <LL_USART_IsEnabled+0x1a>
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_USART_SetStopBitsLength>:
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	605a      	str	r2, [r3, #4]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_USART_SetHWFlowCtrl>:
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	609a      	str	r2, [r3, #8]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_USART_SetBaudRate>:
{
 80029ae:	b480      	push	{r7}
 80029b0:	b087      	sub	sp, #28
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c2:	d11a      	bne.n	80029fa <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	005a      	lsls	r2, r3, #1
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	441a      	add	r2, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	60da      	str	r2, [r3, #12]
}
 80029f8:	e00a      	b.n	8002a10 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	085a      	lsrs	r2, r3, #1
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	441a      	add	r2, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	60da      	str	r2, [r3, #12]
}
 8002a10:	bf00      	nop
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff ff84 	bl	800293c <LL_USART_IsEnabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d14e      	bne.n	8002ad8 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4b29      	ldr	r3, [pc, #164]	; (8002ae4 <LL_USART_Init+0xc8>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	6851      	ldr	r1, [r2, #4]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	68d2      	ldr	r2, [r2, #12]
 8002a4a:	4311      	orrs	r1, r2
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	6912      	ldr	r2, [r2, #16]
 8002a50:	4311      	orrs	r1, r2
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	6992      	ldr	r2, [r2, #24]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ff7c 	bl	8002962 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff89 	bl	8002988 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <LL_USART_Init+0xcc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d104      	bne.n	8002a88 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7ff fa7c 	bl	8001f7c <LL_RCC_GetUSARTClockFreq>
 8002a84:	61b8      	str	r0, [r7, #24]
 8002a86:	e016      	b.n	8002ab6 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <LL_USART_Init+0xd0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d107      	bne.n	8002aa0 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002a90:	f107 0308 	add.w	r3, r7, #8
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fa4b 	bl	8001f30 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	e00a      	b.n	8002ab6 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <LL_USART_Init+0xd4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d106      	bne.n	8002ab6 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fa3f 	bl	8001f30 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d009      	beq.n	8002ad8 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69b9      	ldr	r1, [r7, #24]
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ff6b 	bl	80029ae <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002ad8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	efff69f3 	.word	0xefff69f3
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40004400 	.word	0x40004400
 8002af0:	40004800 	.word	0x40004800

08002af4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <LL_InitTick+0x30>)
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <LL_InitTick+0x30>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <LL_InitTick+0x30>)
 8002b14:	2205      	movs	r2, #5
 8002b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002b30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ffdd 	bl	8002af4 <LL_InitTick>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <LL_SetSystemCoreClock+0x1c>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000004 	.word	0x20000004

08002b64 <__libc_init_array>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	4d0d      	ldr	r5, [pc, #52]	; (8002b9c <__libc_init_array+0x38>)
 8002b68:	4c0d      	ldr	r4, [pc, #52]	; (8002ba0 <__libc_init_array+0x3c>)
 8002b6a:	1b64      	subs	r4, r4, r5
 8002b6c:	10a4      	asrs	r4, r4, #2
 8002b6e:	2600      	movs	r6, #0
 8002b70:	42a6      	cmp	r6, r4
 8002b72:	d109      	bne.n	8002b88 <__libc_init_array+0x24>
 8002b74:	4d0b      	ldr	r5, [pc, #44]	; (8002ba4 <__libc_init_array+0x40>)
 8002b76:	4c0c      	ldr	r4, [pc, #48]	; (8002ba8 <__libc_init_array+0x44>)
 8002b78:	f000 f832 	bl	8002be0 <_init>
 8002b7c:	1b64      	subs	r4, r4, r5
 8002b7e:	10a4      	asrs	r4, r4, #2
 8002b80:	2600      	movs	r6, #0
 8002b82:	42a6      	cmp	r6, r4
 8002b84:	d105      	bne.n	8002b92 <__libc_init_array+0x2e>
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8c:	4798      	blx	r3
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7ee      	b.n	8002b70 <__libc_init_array+0xc>
 8002b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b96:	4798      	blx	r3
 8002b98:	3601      	adds	r6, #1
 8002b9a:	e7f2      	b.n	8002b82 <__libc_init_array+0x1e>
 8002b9c:	08002c54 	.word	0x08002c54
 8002ba0:	08002c54 	.word	0x08002c54
 8002ba4:	08002c54 	.word	0x08002c54
 8002ba8:	08002c58 	.word	0x08002c58

08002bac <memset>:
 8002bac:	4402      	add	r2, r0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <memset+0xa>
 8002bb4:	4770      	bx	lr
 8002bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bba:	e7f9      	b.n	8002bb0 <memset+0x4>

08002bbc <strncmp>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	b16a      	cbz	r2, 8002bdc <strncmp+0x20>
 8002bc0:	3901      	subs	r1, #1
 8002bc2:	1884      	adds	r4, r0, r2
 8002bc4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002bc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d103      	bne.n	8002bd8 <strncmp+0x1c>
 8002bd0:	42a0      	cmp	r0, r4
 8002bd2:	d001      	beq.n	8002bd8 <strncmp+0x1c>
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f5      	bne.n	8002bc4 <strncmp+0x8>
 8002bd8:	1a98      	subs	r0, r3, r2
 8002bda:	bd10      	pop	{r4, pc}
 8002bdc:	4610      	mov	r0, r2
 8002bde:	e7fc      	b.n	8002bda <strncmp+0x1e>

08002be0 <_init>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr

08002bec <_fini>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr
